Key-value NoSQL Database:
    It requires a key-value pair for storing data. A key can be a unique attribute, like an id, that corresponds to a particular value. The application has control to store any type of data in the value field. These are suitable for real-time applications, caching, or session management.
    Use Case:
        This database is best suited for e-commerce platforms where large amounts of customer-related data like orders, user profiles, and product catalogs are generated daily. Due to its low latency and quick processing, it is suitable for real-time inventory management and handling high traffic.

Document-Oriented NoSQL Database:
    These databases store data in documents, mainly in the form of JSON objects. This is most suitable for storing semi-structured or unstructured data, where there is no need to specify the document's fields explicitly.
    Use Case:
        Document-based data is suitable for storing unstructured data like texts, images, links, etc. Also, its flexible schema behaviour allows easy changes in the data model.

Graph Databases:
    This type of NoSQL database is most suitable for data that are strongly interconnected to each other. They store data in the form of nodes and edges and are used to represent complex relationships between objects.

Column-based Databases:
    In this type of NoSQL database, the data is stored in column families. Similar types of data are grouped into cells and stored in columns of data instead of rows. A column can even contain multiple rows and columns inside it, which have their own unique id.
    Use Case:
        Column-family databases are best suited for data warehousing applications.

CONFIGURATION NODE:
mongo --host <hostname> --port <>
rs.initiate(
  {
	_id: "cfgrs",
	configsvr: true,
	members: [
  	{ _id : 0, host : "bdm-project-confnode-1:27017" }
	]
  }
)

SHARD NODE
mongo --host <hostname> --port <>
rs.reconfig(
  {
	_id: "shard1rs",
	members: [
  	{ _id : 0, host : "shardnode2:27017" },
  	{ _id : 1, host : "shardnode1:27017" }
	]
  }
)

DOCKER COMPOSE
services:

  ShardNode_1:
    image: mongo
    command: mongod --shardsvr --replSet shard_rs --port 27017
    ports: 
      - 27027:27017
    volumes:
      - mongoshard:/sharding/node1/data/db

  ShardNode_2:
    image: mongo
    command: mongod --shardsvr --replSet shard_rs --port 27017
    ports: 
      - 27037:27017
    volumes:
      - mongoshard:/sharding/node2/data/db
  
  configurationNode:
    image: mongo
    command: mongod --configsvr --replSet configuration_rs --port 27017
    ports: 
      - 27047:27017
    volumes:
      - mongoshard:/sharding/nodeConf/data/db

  routerNode:
    image: mongo
    command: mongos --configdb configuration_rs/configurationNode:27047 --port 27017
    ports:
      - 27057:27017

volumes:
  mongoshard:
    driver: local